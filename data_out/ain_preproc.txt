#file "data_in/lazy2.txt"
#line 1
//#include "data_in/big/unit_tests.txt"
#file "data_in/big/error.txt"
#line 1
/// error.txt
#file "data_in/big/err_printf.txt"
#line 1
#file "data_in/big/number.txt"
#line 1
#file "data_in/big/string.txt"
#line 1
int strlen(char *str)
	int i = 0;
	while(*str++) i++; end
	return i;
end

void string_reverse(char *str)
	int len = strlen(str);
	for(int i = 0; i < len/2; i++)
		int opposite = len-1-i;
		char d = str[i];
		str[i] = str[opposite];
		str[opposite] = d;
	end	
end

void memmove(char *dest, char *src, int size)
	if(dest > src)
		//print(".moveback.");
		for(int i = size-1; i > -1; i--)
			dest[i] = src[i];
		end
		//for(int i = 0; i < size; i++)
		//	dest[i] = 'w';
		//end
	end
	if(dest < src)
		//writePort(3,2);
		for(int i = 0; i < size; i++)
			dest[i] = src[i];
		end
	end
end

void strmove(char *dest, char *src)
	int len = strlen(src);
	memmove(dest, src, len+1); //includes terminating zero
end

void strncpy(char *dest, char *src, int n)
	while(n--)
		char C = *src++;
		*dest++ = C;
		if(C == 0) return; end
	end
end


//if the string is shorter than padlen, pads in with padchar
void strPadBegin(char *str, int padlen, char padchar)
	int len = strlen(str);
	if(len < padlen)
		int diff = padlen - len;
		strmove(str+diff, str);
		for(int i = 0; i < diff; i++)
			str[i] = padchar;
		end
	end
end

void strPadEnd(char *str, int padlen, char padchar)
	int len = strlen(str);
	if(len < padlen)
		int diff = padlen - len;
		for(int i = 0; i < diff; i++)
			str[len+i] = padchar;
		end
		str[padlen] = 0;
	end
end
#file "data_in/big/number.txt"
#line 2

//returns the (floored) log10 of a number, i.e. number of digits in floor(num).
//assumes num is positive
int ilog10(float num)
	for(int i = 0; i < 10; i++)
		if(num < 10) return i; end
		num = num / 10;
	end
end

//returns 10^num
int ipow10(int num)
	int x = 1;
	for(int i = 0; i < num; i++)
		x = x*10;
	end
	return x;
end

int numDigits(float num) return ilog10(num)+1; end

int getNdigit(float num, int dig)
	//1. remove the lower parts
	num = num / ipow10(dig);
	//2. get the lowest remaining digit
	num = num % 10;
	return num;
end

int floor(float num)
	int res = 0;
	int n = numDigits(num);
	for(int i = 0; i < n; i++)
		int d = getNdigit(num, i);
		res = res + d * ipow10(i);
	end
	return res;
end

int floorPrec(float num, int prec)
	//printf("floorPrec(%d):\n", num);
	int k = ipow10(prec); 	//printf(" ipow10(%d) = %d\n", prec, k);
	num = num * k; 			//printf(" num*k = %d\n", num);
	num = floor(num);		//printf(" floor(num) = %d\n", num);
	num = num / k;			//printf(" num/k = %d\n", num);
	return num;
end

float frac(float num)
	int isNeg = (num < 0);
	if(isNeg) num = -num; end
	float f = num - floor(num);
	if(isNeg) f = -f; end
	return f;
end



void int2str(int num, char *buff)
	char *buffInit = buff;
//	if(num == 0)
//		buff[0] = '0';//*buff++ = '0';
//		buff++;
//		buff[0] = 1;//*buff = 0;
//	end
	int isNeg = 0;
	if(num < 0) isNeg = 1; num = -num; end
	int End = 0;
	while(End==0)
		int d = num % 10;	
		buff[0] = '0'+d;
		buff++;
		num = num / 10;
		
		if(num<1) //if(num == 0)
			if(isNeg) buff[0] = '-'; buff++; end
			buff[0] = 0;
			End = 1;
		end
	end
	string_reverse(buffInit);
end




void float2str(float num, int prec, char *buff)
	char *buffInit = buff;
	int isNeg = (num < 0);
	if(isNeg) num = -num; end
	int num_fl = floor(num);
	float num_fr = frac(num);
	float num_frpr = floorPrec(num_fr, prec);
	//printf("float2str(%d, %d):\n",num, prec);
	//printf("  num_fl = %d\n", num_fl);
	//printf("  num_fr*1000 = %d\n", num_fr*1000);
	//printf("  num_frpr*1000 = %d\n", num_frpr*1000);
	//if(isNeg) *buff++ = '-'; end
	if(isNeg) buff[0] = '-'; buff++; end
	int2str(num_fl, buff);
	buff = buff + strlen(buff);
	//if(num_fr)
		//*buff++ = '.';
		buff[0] = '.';
		buff++;
		int k = ipow10(prec);
		float num_final = floor(num_frpr*k);
		//printf("  num_final = %d\n", num_final);
		int2str(num_final, buff);
		strPadBegin(buff, prec, '0');
	//end
end
#file "data_in/big/err_printf.txt"
#line 2

/// printf for errors in case stuff borks
int err_snprintf(char *buff, int max_len, char *fmt, void *parg)
	int printed = 0;
	int stop = 0;
	while(!stop)
		char c = *fmt;
		int rem = max_len - printed;
		if(rem > 10)
			if(c == '%')
				fmt++;
				char c2 = *fmt;
				fmt++;
				if(c2 == 'd') int2str(*(int*)parg, buff); parg++; end
				if(c2 == 'f') float2str(*(float*)parg, 4, buff); parg++; end
				if(c2 == 's') /*strmove*/ strncpy(buff, *(char**)parg, rem); parg++; end
				if(c2 == 'c') buff[0] = *(char*)parg; parg++; buff[1] = 0; end
				if(c2 == '%') buff[0] = '%'; buff[1] = 0; end
				int inc = strlen(buff);
				printed = printed + inc;
				buff = buff + inc;
			end
			if(c != '%')
				if(c == '\')
					fmt++;
					char c2 = *fmt;
					fmt++;
					if(c2 == 'n') buff[0] = '\n'; buff[1] = 0; end
					if(c2 == 'r') buff[0] = '\r'; buff[1] = 0; end
					if(c2 == 'f') buff[0] = 15; buff[1] = 0; end
					if(c2 == 'b') buff[0] = '\b'; buff[1] = 0; end
					if(c2 == 'e') buff[0] = '\e'; buff[1] = 0; end
					if(c2 == '\\') buff[0] = '\\'; buff[1] = 0; end
					int inc = strlen(buff);
					printed = printed + inc;
					buff = buff+inc;
				end
				if(c != '\\')
					buff[0] = c;
					buff[1] = 0;
					printed++;
					buff++;
					fmt++;
				end
			end
			if(!*fmt) stop = 1; end
		else
			stop = 1;
		end
	end
	return printed;
end

int err_printf(int col, char *fmt, varargs)
	int printed = 0;
	char buff[80];
	buff[79] = 0;
	void *parg = (void*)&fmt; 
	parg++;
	printed = err_snprintf(&buff, 78, fmt, parg);
	err_puts(&buff, col);
	return printed;
end

int err_scr_I = 0;
int err_scr_width = 30;
			   
void err_clear()
	int *adr_scr = 65536+20000+20000;
	adr_scr[2041] = 1;	
	err_scr_I = 0;
end

void err_puts(char *str, int col)
	int *adr_scr = 65536+20000+20000;
	int *p = adr_scr + 2*err_scr_I;
	while(*str)
		char C = *str++;
		if(C == '\n')
			int col = err_scr_I % err_scr_width;
			writePort(1, col);
			int rem = err_scr_width - col;
			writePort(2, rem);
			err_scr_I = err_scr_I + rem;//(err_scr_width - (err_scr_I % err_scr_width));
			while(err_scr_I > (err_scr_width * 16))
				writePort(0, err_scr_I);
				err_scr_I = err_scr_I - err_scr_width;
				adr_scr[2038] = 1; // scroll the screen by 1 line
			end
			p = adr_scr + 2*err_scr_I;
		else
			*p++ = C;
			*p++ = col;
			err_scr_I++;
		end
	end
end












#file "data_in/big/error.txt"
#line 3

int processing_error = 0;

void error(char *str)
	if(!processing_error)
		processing_error = 1;
		err_clear();
		err_printf(911, "%s\n", str);
	end
	crash();
end

//void crash() int x = 1/0; end

void assert(int cond) if(!cond) crash(); end end

#file "data_in/lazy2.txt"
#line 3
#file "data_in/big/testOutput.txt"
#line 1
void infloop() while(1) end end

int *adr_port = 65536;

void writePort(int port, int val)
	*(adr_port+port) = val;
end

void resetPorts()
	writePort(0, 9999);
	writePort(1, 9999);
	writePort(2, 9999);
	writePort(3, 9999);
	writePort(4, 9999);
	writePort(5, 9999);
	writePort(6, 9999);
	writePort(7, 9999);
end

void setup()
	//screen_set(65536+100);
	//screen_clear();
	//libprints_init();
	resetPorts();
end

void crash()
	int x = 1;
	x = x/0;
end

void delay(float n) n = n * 10000; for(int i = 0; i < n; i++) end end
#file "data_in/lazy2.txt"
#line 4
//#include "data_in/big/simple/printf.txt"
//#include "data_in/big/classy/class_address_bus.txt"
//#include "data_in/big/classy/class_csprinter.txt"
//#include "data_in/big/classy/printf_io.txt"
//#include "data_in/big/classy/allocators/bump_allocator.txt"

/// NEED NOW::: usercode stack trace in case of crash with emergency print

class stack_frame
	int *p_ebp = 0;

	void constructor()
		int *x = 0;		/// first variable in this function has addr EBP:-1
		x = &x + 1;		/// pointer points to the cell after itself (EBP:-1:+1 == EBP)
		p_ebp = x;		/// frame of the "set_current" function
		p_ebp = *p_ebp; /// frame of the calling function
	end

	class stack_frame prev_frame()
			check_stack_size();
		class stack_frame F;
		if(p_ebp) F.p_ebp = *p_ebp; end
		return F;
	end
	
	int get_ret_ip() 
			check_stack_size();
		int ip = p_ebp[1];
		//err_printf(999, "get_ret_ip(ebp=%d):\n",(int)p_ebp);
		//err_printf(999, "  -1: %d\n", p_ebp[-1]);
		//err_printf(999, "   0: %d\n", p_ebp[0]);
		//err_printf(999, "  +1: %d\n", p_ebp[ 1]);
		//err_printf(999, "  ... ret %d\n", ip);
		return ip;//p_ebp[-1]; 
	end	
end

class debug_info_func
	int record_len = 0;
	int lbl_entrance = 0;
	int lbl_exit = 0;
	int ir_name_len = 0;
	char *ir_name = 0;
	int user_name_len = 0;
	char *user_name = 0;
	
	void deserialize(int *p)
			check_stack_size();
		int *p_initial = p;
		record_len = *p++;
		lbl_entrance = *p++;
		lbl_exit = *p++;
		ir_name_len = *p++;
		ir_name = p; p = p + ir_name_len;
		user_name_len = *p++;
		user_name = p;
		err_printf(999, "di_func @ %d:\n got [%s]\n", (int)p_initial, ir_name);
	end
end


class debug_info_var
	int record_len = 0;
	int lbl_from = 0;
	int lbl_to = 0;
	int pos = 0;
	int framedepth = 0;
	int ir_name_len = 0;
	char *ir_name = 0;
	int user_name_len = 0;
	char *user_name = 0;

	void deserialize(int *p)
			check_stack_size();
		record_len = *p++;
		lbl_from = *p++;
		lbl_to = *p++;
		pos = *p++;
		framedepth = *p++;
		ir_name_len = *p++;
		ir_name = p; p = p + ir_name_len;
		user_name_len = *p++;
		user_name = p;
	end
end

int get_var_at_ip_helper(int ip, class debug_info_var var)
			check_stack_size();
	var.pos = 10;									/// this works
	//if(!(var.lbl_from > ip) & !(var.lbl_to < ip)) 	/// this doesn't
	int x = var.lbl_from;
	int y = var.lbl_to;
	if((ip >= x) & (ip <= y)) 	/// this works? /// BUG: symtable of IF is broken
		return 1;
	end
	return -1;
end

class debug_info_var_db
	class debug_info_var vars[1000];
	int n_vars = 0;
	
	void deserialize(int *p)
			check_stack_size();
		n_vars = *p++;
		class debug_info_var var;
		for(int i = 0; i < n_vars; i++)
			var.deserialize(p);
			p = p+var.record_len;
		end
	end
	
	int get_var_at_ip(int ip, int from_idx)
			check_stack_size();
		class debug_info_var var;
		for(int i = from_idx; i < n_vars; i++)
			
			//if(!(vars[i].lbl_from > ip) & !(vars[i].lbl_to < ip)) // need >= and <= /// bug: array[i].member doesn't work (actually any obj.member)
			//class debug_info_var var = vars[i]; /// bug: var_4, declared inside a for-loop, is missing a "symbol X" declaration in iR
			//if(!(var.lbl_from > ip) & !(var.lbl_to < ip)) // bug, can't access var.member from another class
			//	return i;
			//end
			var = vars[i];
			int res = get_var_at_ip_helper(ip, var);
			if(res != -1) return i; end
		end
		return -1;
	end
end

class debug_info_func_db
	class debug_info_func funcs[300];
	int n_funcs = 0;
	
	// this whole constructor breaks all the shit
	/*
	int constructor()
		writePort(4, 1);
		n_funcs = 0;
		for(int i = 0; i < 1000; i++)
			//funcs[i].record_len = 0;
			class debug_info_func *p = (class debug_info_func*)(&funcs + i);
			p.record_len = 0;
			//funcs[i].ir_name = "<ERROR>";
			p.ir_name = "<ERROR>";
			// this seems broken? array base is dereferenced before indexing, it shouldn't be.
			  //COMMENT SOURCE "funcs[i].ir_name = "<ERROR>";" // semantic_analyze.c:1014 
			  //ADD temp_1283 this_49 funcs    this.id [funcs]  // semantic_expr_op.c:286
			  //    out(L <- P): *temp_1283 from temp_1283 (rename_star) //auth: to expr_index array (arr[]) from expr_id 
			  //    global id [i]  // semantic_expr_op.c:286
			  //    out(R <- L): i_15 from i_15 (pass) //auth: to expr_index index ([idx]) from expr_id 
			  //ADD temp_1284 *temp_1283 i_15 // semantic_expr_op.c:463
			  //    out(P <- P): temp_1284 from temp_1284 (pass) //auth: to expr_dot object(o.) from expr_index 
			  //ADD temp_1285 temp_1284 ir_name    this.id [ir_name]  // semantic_expr_op.c:286
  
		end
		writePort(4, 2);
	end
	*/
	//
	
	void deserialize(int *p)
		check_stack_size();
		err_printf(999, "func_db: p = %d, n_funcs = %d\n", p, *p);
		n_funcs = *p++;
		class debug_info_func func;
		err_printf(999, "func_db 1, n_funcs = %d\n", n_funcs);
		int test = 0;
		for(int j = 0; j == 0; j++)
			err_printf(999, "func_db 2, j = %d\n, n_funcs = %d\n", j, n_funcs);
		end
		for(int i = 0; i < n_funcs; i++)
			err_printf(999, "func_db[%d]\n", i);
			test++;
			func.deserialize(p);
			funcs[i] = func;
			p = p+func.record_len;
		end
		err_printf(999, "func_db test = %d\n", test);
	end
	
	int get_func_at_ip(int ip)
		for(int i = 0; i < n_funcs; i++)
			check_stack_size();
			//if(!(funcs[i].lbl_entrance > ip) & !(funcs[i].lbl_exit < ip))	
			int x = funcs[i].lbl_entrance;
			int y = funcs[i].lbl_exit;
			if(ip == 0) error("get_func_at_ip: input ip = 0\n"); end
			if(x == 0) error("get_func_at_ip: lbl_entrance = 0\n"); end
			if(y == 0) error("get_func_at_ip: lbl_exit = 0\n"); end
			if((ip >= x) & (ip <= y))//should be same as if(!(x > ip) & !(y < ip))
				return i;
			end
		end
		return -1;
	end
end

class T_stack_trace
	class debug_info_func_db *func_db = 0;
	class debug_info_var_db *var_db = 0;
	
	void trace()
		class stack_frame frame;
		int check_ebp = 0;
		asm("mov $S[check_ebp], EBP");
		err_printf(999, "trace:\n frame.ebp = %d\n check_ebp = %d\n", (int)frame.p_ebp, check_ebp);
		int frame_n = 0;
		while(frame.p_ebp)
			check_stack_size();
			int ip = frame.get_ret_ip();
			if(ip == 0) infloop(); end
			//class debug_info_func func = func_db.get_func_at_ip(ip); //fixed bug: this shouldn't be allowed due to typecheck
			int func_id = func_db.get_func_at_ip(ip);
			err_printf(999, ".. func_id = %d\n", func_id);
			if(func_id != -1)
				//class debug_info_func func = func_db.funcs[func_id];
				err_printf(990, "1");
				class debug_info_func *p_func = &(func_db.funcs) + func_id;
				err_printf(990, "2");
				class debug_info_func func = *p_func;
				err_printf(999, "p_func = %d\n", (int)p_func);
				err_printf(999, " &func = %d\n", (int)&func);
				
				err_printf(990, "3");
				int offset = ip - func.lbl_entrance;
				err_printf(990, "4");
				char *name = func.ir_name;//user_name;
				err_printf(990, "5");
				err_printf(999, "%d:%d (%s + %d)\n", frame_n, ip, name, offset);
				err_printf(990, "6");
				
				err_printf(999, "\n");
			else
				err_printf(999, "%d:%d (unknown)\n", frame_n, ip);
			end
			frame = frame.prev_frame();
			frame_n++;
			if(!frame.p_ebp)
				err_printf(999, "... pause\n");
				infloop();
			end
		end
	end
end

class debug_info_func_db func_db;
class debug_info_var_db var_db;
class T_stack_trace stack_trace;

void init_stack_trace()
	err_printf(999, "Initializing func db\n");
	int *p_debug_info_func = 0;
// $S[...] means "create temporary, use it here, and later save it"
// $R[...] means "load (read) as R-value"
// $L[...] means "load (copy) as modifiable L-value"
	asm( "mov $S[p_debug_info_func], debug_info_funcs" ); 
	func_db.deserialize(p_debug_info_func);
	stack_trace.func_db = &func_db;
	err_printf(999, "Func db ready\n");
end

/// we probably need asm to actually give the debug info to these functions

void test_stack_trace()
	stack_trace.trace();
end
/// if screen doesn't scroll, try
/// semantic_expr_op.c:492 uncomment block

void check_stack_size()
	int end_of_code = 0;
	int esp;
	// either asm with two arguments, or if's, are fucked
	
	//asm( "mov $S[end_of_code], data_segment_static_end\nmov $S[esp], esp");
	
	asm( "mov $S[end_of_code], data_segment_static_end");
	asm( "mov $S[esp], esp");
	err_printf(999, "esp %d, eoc %d\n", esp, end_of_code);
	if((esp-100) < end_of_code) // a bit of a margin so printf works
	//int x = esp - 100;
	//if(x < end_of_code) /// are if's just completely fucked?
		err_printf(900, "Stack overflow\nesp %d\nend_of_code %d\n", esp, end_of_code);
		infloop();
	end
end

void test_stack_overflow()
	int esp;
	int arr[100];
	check_stack_size();
	asm("mov $S[esp], esp");
	err_printf(999, "test overflow: esp %d\n", esp);
	test_stack_overflow();
end

int ss_size = 0;
int ss_stack_top = 0;
int ss_stack_btm = 0;
int ss_esp = 0;
int ss_ebp = 0;
int ss_ret_ip = 0;

void set_stack(int new_stack_btm, int new_stack_top, int new_esp, int new_ebp)
	ss_stack_top = new_stack_top;
	ss_stack_btm = new_stack_btm;
	ss_esp = new_esp;
	ss_ebp = new_ebp;
	ss_size = new_stack_top - new_stack_btm;
	err_printf(999, "set_stack, btm = %d, top = %d, size = %d, new_esp = %d, new_ebp = %d\n",
		new_stack_btm, new_stack_top, ss_size, new_esp, new_ebp);
	
	asm("mov $S[ss_ret_ip], EBP:#1"); // save return ip
	asm("mov SS, $R[ss_stack_btm]"); // set stack size
	asm("mov ESP, $R[ss_esp]");		 // set stack pointer (should be ~= size)
	asm("cpuset 9, $R[ss_size]");	 // set stack zero
	asm("mov EBP, $R[ss_ebp]");		 // set frame base pointer
	asm("jmp $R[ss_ret_ip]");		 // simulate return
end

int get_end_of_code()
	int eoc = 0;
	asm("mov $S[eoc], __programsize__");
	return eoc;
end

int main()
	setup();
	//err_printf(990, "Running unit tests...\n");
	//run_all_tests();
	//err_printf(90,  "All tests pass.\n");
	
	err_printf(999, "Hello world!\n");
	int eoc = get_end_of_code();
	int stack_size = 65535 - eoc;

	writePort(0,123);
	set_stack(eoc, eoc+stack_size, stack_size-20, stack_size);
	writePort(0,456);
	main_rest();
end

int main_rest()
	test_stack_overflow();
	//delay(1); err_printf(999, "1");
	//delay(1); err_printf(999, "2");
	//delay(1); err_printf(999, "3");
	//delay(1); err_printf(999, "4");
	//delay(1); err_printf(999, "5");
	//delay(1); err_printf(999, "6");

	init_stack_trace();
	
	test_stack_trace();

	err_printf(999, "End of program\n");
	infloop();

	//class Address_bus addr_bus(65536, 20000, 20000, 20000);
	//class CScreen scr; scr.set(addr_bus.addr[2]);
	//class CSPrinter printer; printer.scr = &scr;
	//printer.init();
	//std_out = printer.ifx;
	//scr.clear();
	//printf("Hello [%s] %d!\n", "world", 123456);
	
	/*
	class Bump_allocator bumpalloc;
	int heap = 30000;
	int heap_size = 10000;
	bumpalloc.init((void*)heap, heap_size);
	cur_allocator = bumpalloc.ifx;	
	printf("malloc initialized\n");
	printf("malloc(10) p1 = %d\n", (int)malloc(10));
	printf("malloc(20) p2 = %d\n", (int)malloc(20));
	*/
	infloop();
end
















