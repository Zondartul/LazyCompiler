#include "lazy_string.txt"

float printX = 0;
float printY = 0;

float print(float *S)
	
	printXY(S,printX,printY);
	float len = strlen(S);
	while(len > 29)
		len = len - 30;
		printX = 0;
		printY++;
	end
	printX = printX + len;
end

float println(float *S)
	print(S);
	if(printX != 0) printY++; printX = 0; end
end
float printnum(float N)
	float arr[20];
	itoa(arr,N);
	print(arr);
end
float printXY(float *S, float X, float Y)
	//scr(2,S);
	float I = 0;
	float C = *S++;
	//float C = S[I++];
	while(C)
//		adr_console[2*I] = C;
//		adr_console[2*I+1] = 999;
		float Adr = 30*Y+X;
		adr_console[2*Adr] = C;
		adr_console[2*Adr+1] = 999;
		X++;
		C = *S++;
		//C = S[I++];
	end
end

/* exceptions:
caller:
----------
EBP: ebp
     vars
	 except-handler1
	 except-handler2
	 0

callee:
------------
     except-data-ptr
     except-handler-table-ptr
     ret-IP
EBP: ebp
     args
------------

throw pseudocode:
throw:
(unwind stack?)
for each(f in except handler)
    call(f) //the real handler will not return
end
rethrow() // leave; if(ebp) goto throw; else terminate(); end 

*/