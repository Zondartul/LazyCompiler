/// bump allocator
#include "data_in/big/string.txt" // for memmove
#include "data_in/big/classy/ifx_malloc.txt"

class Bump_allocator
	void *heap = 0;
	void *heap_free_ptr = 0;
	void *heap_max = 0;
	
	class ifx_malloc ifx;

	void init(void *new_heap, int heap_size)
		heap = new_heap;
		heap_free_ptr = heap;
		heap_max = heap + heap_size;

		ifx.impl = this;
		ifx.malloc = this.ba_malloc;
		ifx.realloc = this.ba_realloc;
		ifx.free = this.ba_free;
		ifx.malloc_get_counts = this.ba_malloc_get_counts;
	end
	
	void *ba_malloc(int size)
		if((heap_free_ptr + size) < heap_max)
			void *p = heap_free_ptr;
			heap_free_ptr = heap_free_ptr + size;
		else
			error("bumpalloc: OUT OF RAM");
			return 0;
		end
	end
	
	void ba_free(void *p)
	end
	
	void *ba_realloc(void *p, int size)
		void *p2 = malloc(size);
		memmove(p2, p, size);
	end
	
	class malloc_info ba_malloc_get_counts()
		class malloc_info mi;
		int size = (int)heap_max - (int)heap;
		int size_used = (int)heap_free_ptr - (int)heap_max;
		int size_free = size - size_used;
		mi.size_free = size_free;
		mi.size_used = size_used;
		mi.blocks_free = 1;
		mi.blocks_used = 1;
		return mi;
	end
end