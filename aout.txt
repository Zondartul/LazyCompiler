GNU gdb (GDB) 7.6.1
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "mingw32".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from C:\Stride\LazyComp\data\a.exe...done.
(gdb) Starting program: C:\Stride\LazyComp\data/a.exe lazy2.txt
[New Thread 2408.0xce8]
sizeof ast_node = '132'
test diff = '4', size = '4'
Lexxed token [int]
num allocs: 5, mem used: 26906
node "typename": [int] (0/0)
Lexxed token [import]
num allocs: 8, mem used: 27046
Lexxed token [(]
num allocs: 9, mem used: 27053
Lexxed token [int]
num allocs: 9, mem used: 27053
node "typename": [int] (0/0)
Lexxed token [arg]
num allocs: 11, mem used: 27197
Lexxed token [)]
num allocs: 12, mem used: 27201
node "var_decl": [arg] (0/1)
node "var_decl_list_ne": [(null)] (1/1)
node "var_decl_list": [(null)] (0/1)
unroll [var_decl_list]  unroll done
Lexxed token [end]
num allocs: 18, mem used: 27621
node "stmt_list": [<empty>] (1/0)
FUNC_DEF ID = [import]
node "func_def": [import] (0/3)
node "decl_stmt": [(null)] (1/1)
node "decl_stmt_list_ne": [(null)] (1/1)
Lexxed token [int]
num allocs: 25, mem used: 28185
node "typename": [int] (0/0)
Lexxed token [export]
num allocs: 27, mem used: 28321
Lexxed token [(]
num allocs: 28, mem used: 28328
Lexxed token [int]
num allocs: 28, mem used: 28328
node "typename": [int] (0/0)
Lexxed token [arg]
num allocs: 30, mem used: 28488
Lexxed token [)]
num allocs: 31, mem used: 28492
node "var_decl": [arg] (0/1)
node "var_decl_list_ne": [(null)] (1/1)
node "var_decl_list": [(null)] (0/1)
unroll [var_decl_list]  unroll done
Lexxed token [end]
num allocs: 37, mem used: 28900
node "stmt_list": [<empty>] (1/0)
FUNC_DEF ID = [export]
node "func_def": [export] (0/3)
node "decl_stmt": [(null)] (1/1)
node "decl_stmt_list_ne": [(null)] (0/2)
Lexxed token [int]
num allocs: 44, mem used: 29492
node "typename": [int] (0/0)
Lexxed token [print]
num allocs: 46, mem used: 29628
Lexxed token [(]
num allocs: 47, mem used: 29634
Lexxed token [string]
num allocs: 47, mem used: 29634
node "typename": [string] (0/0)
Lexxed token [str]
num allocs: 49, mem used: 29773
Lexxed token [)]
num allocs: 50, mem used: 29777
node "var_decl": [str] (0/1)
node "var_decl_list_ne": [(null)] (1/1)
node "var_decl_list": [(null)] (0/1)
unroll [var_decl_list]  unroll done
Lexxed token [end]
num allocs: 56, mem used: 30185
node "stmt_list": [<empty>] (1/0)
FUNC_DEF ID = [print]
node "func_def": [print] (0/3)
node "decl_stmt": [(null)] (1/1)
node "decl_stmt_list_ne": [(null)] (0/2)
Lexxed token [int]
num allocs: 63, mem used: 30797
node "typename": [int] (0/0)
Lexxed token [main]
num allocs: 65, mem used: 30933
Lexxed token [(]
num allocs: 66, mem used: 30938
Lexxed token [int]
num allocs: 66, mem used: 30938
node "typename": [int] (0/0)
Lexxed token [argc]
num allocs: 68, mem used: 31074
Lexxed token [,]
num allocs: 69, mem used: 31079
node "var_decl": [argc] (0/1)
node "var_decl_list_ne": [(null)] (1/1)
Lexxed token [int]
num allocs: 73, mem used: 31351
node "typename": [int] (0/0)
Lexxed token [argv]
num allocs: 75, mem used: 31487
Lexxed token [)]
num allocs: 76, mem used: 31492
node "var_decl": [argv] (0/1)
node "var_decl_list_ne": [(null)] (0/2)
node "var_decl_list": [(null)] (0/1)
unroll [var_decl_list]  unroll done
Lexxed token [char]
num allocs: 82, mem used: 31916
node "typename": [char] (0/0)
Lexxed token [C]
num allocs: 84, mem used: 32053
Lexxed token [;]
num allocs: 85, mem used: 32055
node "var_decl": [C] (0/1)
node "decl_stmt": [(null)] (2/1)
node "stmt": [(null)] (1/1)
node "stmt_list_ne": [(null)] (1/1)
Lexxed token [if]
num allocs: 93, mem used: 32683
Lexxed token [(]
num allocs: 93, mem used: 32683
Lexxed token [argc]
num allocs: 93, mem used: 32683
node "expr_id": [argc] (0/0)
Lexxed token [=]
num allocs: 95, mem used: 32820
Lexxed token [0]
num allocs: 95, mem used: 32820
node "expr_const": [0] (0/0)
Lexxed token [)]
num allocs: 97, mem used: 32954
node "expr_=": [(null)] (0/2)
Lexxed token [then]
num allocs: 99, mem used: 33098
Lexxed token [print]
num allocs: 99, mem used: 33098
node "expr_id": [print] (0/0)
Lexxed token [(]
num allocs: 101, mem used: 33236
Lexxed token ["usage: a.exe arg1 arg2"]
num allocs: 101, mem used: 33236
node "expr_const": ["usage: a.exe arg1 arg2"] (5/0)
Lexxed token [)]
num allocs: 103, mem used: 33393
node "expr_list_ne": [(null)] (1/1)
node "expr_list": [(null)] (0/1)
unroll [expr_list]  unroll done
node "expr_call": [(null)] (0/2)
Lexxed token [;]
num allocs: 109, mem used: 33809
node "imp_stmt": [(null)] (2/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (1/1)
Lexxed token [return]
num allocs: 115, mem used: 34217
Lexxed token [1]
num allocs: 115, mem used: 34217
node "expr_const": [1] (0/0)
Lexxed token [;]
num allocs: 117, mem used: 34351
node "imp_stmt": [(null)] (4/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [else]
num allocs: 123, mem used: 34767
node "stmt_list": [(null)] (0/1)
unroll [stmt_list]  unroll done
node "if_then": [(null)] (0/2)
Lexxed token [float]
num allocs: 127, mem used: 35055
node "typename": [float] (0/0)
Lexxed token [A]
num allocs: 129, mem used: 35193
Lexxed token [=]
num allocs: 130, mem used: 35195
Lexxed token [import]
num allocs: 130, mem used: 35195
node "expr_id": [import] (0/0)
Lexxed token [(]
num allocs: 132, mem used: 35334
Lexxed token [argc]
num allocs: 132, mem used: 35334
node "expr_id": [argc] (0/0)
Lexxed token [)]
num allocs: 134, mem used: 35471
node "expr_list_ne": [(null)] (1/1)
node "expr_list": [(null)] (0/1)
unroll [expr_list]  unroll done
node "expr_call": [(null)] (0/2)
Lexxed token [;]
num allocs: 140, mem used: 36011
node "var_decl_assign": [A] (1/2)
node "decl_stmt": [(null)] (2/1)
node "stmt": [(null)] (1/1)
node "stmt_list_ne": [(null)] (1/1)
Lexxed token [A]
num allocs: 148, mem used: 36563
node "expr_id": [A] (0/0)
Lexxed token [=]
num allocs: 150, mem used: 36697
Lexxed token [A]
num allocs: 150, mem used: 36697
node "expr_id": [A] (0/0)
Lexxed token [*]
num allocs: 152, mem used: 36831
Lexxed token [argv]
num allocs: 152, mem used: 36831
node "expr_id": [argv] (0/0)
Lexxed token [;]
num allocs: 154, mem used: 36968
node "expr_*": [(null)] (0/2)
node "expr_=": [(null)] (0/2)
node "imp_stmt": [(null)] (2/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [export]
num allocs: 164, mem used: 37672
node "expr_id": [export] (0/0)
Lexxed token [(]
num allocs: 166, mem used: 37811
Lexxed token [A]
num allocs: 166, mem used: 37811
node "expr_id": [A] (0/0)
Lexxed token [)]
num allocs: 168, mem used: 37945
node "expr_list_ne": [(null)] (1/1)
node "expr_list": [(null)] (0/1)
unroll [expr_list]  unroll done
node "expr_call": [(null)] (0/2)
Lexxed token [;]
num allocs: 174, mem used: 38361
node "imp_stmt": [(null)] (2/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [while]
num allocs: 180, mem used: 38777
Lexxed token [(]
num allocs: 180, mem used: 38777
Lexxed token [A]
num allocs: 180, mem used: 38777
node "expr_id": [A] (0/0)
Lexxed token [)]
num allocs: 182, mem used: 38911
Lexxed token [print]
num allocs: 182, mem used: 38911
node "expr_id": [print] (0/0)
Lexxed token [(]
num allocs: 184, mem used: 39049
Lexxed token [A]
num allocs: 184, mem used: 39049
node "expr_id": [A] (0/0)
Lexxed token [)]
num allocs: 186, mem used: 39183
node "expr_list_ne": [(null)] (1/1)
node "expr_list": [(null)] (0/1)
unroll [expr_list]  unroll done
node "expr_call": [(null)] (0/2)
Lexxed token [;]
num allocs: 192, mem used: 39599
node "imp_stmt": [(null)] (2/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (1/1)
Lexxed token [A]
num allocs: 198, mem used: 40195
node "expr_id": [A] (0/0)
Lexxed token [=]
num allocs: 200, mem used: 40329
Lexxed token [A]
num allocs: 200, mem used: 40329
node "expr_id": [A] (0/0)
Lexxed token [/]
num allocs: 202, mem used: 40463
Lexxed token [1]
num allocs: 202, mem used: 40463
node "expr_const": [1] (0/0)
Lexxed token [;]
num allocs: 204, mem used: 40597
node "expr_/": [(null)] (0/2)
node "expr_=": [(null)] (0/2)
node "imp_stmt": [(null)] (2/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [if]
num allocs: 214, mem used: 41301
Lexxed token [(]
num allocs: 214, mem used: 41301
Lexxed token [A]
num allocs: 214, mem used: 41301
node "expr_id": [A] (0/0)
Lexxed token [=]
num allocs: 216, mem used: 41435
Lexxed token [1]
num allocs: 216, mem used: 41435
node "expr_const": [1] (0/0)
Lexxed token [)]
num allocs: 218, mem used: 41569
node "expr_=": [(null)] (0/2)
Lexxed token [then]
num allocs: 220, mem used: 41713
Lexxed token [return]
num allocs: 220, mem used: 41713
Lexxed token [1]
num allocs: 220, mem used: 41713
node "expr_const": [1] (0/0)
Lexxed token [;]
num allocs: 222, mem used: 41847
node "imp_stmt": [(null)] (4/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (1/1)
Lexxed token [end]
num allocs: 228, mem used: 42255
node "stmt_list": [(null)] (0/1)
unroll [stmt_list]  unroll done
node "if_then": [(null)] (0/2)
node "if_block": [(null)] (0/1)
node "imp_stmt": [(null)] (0/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [end]
num allocs: 240, mem used: 43087
node "stmt_list": [(null)] (0/1)
unroll [stmt_list]  unroll done
node "while_loop": [(null)] (0/2)
node "imp_stmt": [(null)] (1/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [return]
num allocs: 250, mem used: 43791
Lexxed token [0]
num allocs: 250, mem used: 43791
node "expr_const": [0] (0/0)
Lexxed token [;]
num allocs: 252, mem used: 43925
node "imp_stmt": [(null)] (4/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [end]
num allocs: 258, mem used: 44341
node "stmt_list": [(null)] (0/1)
unroll [stmt_list]  unroll done
node "if_block": [(null)] (1/2)
node "imp_stmt": [(null)] (0/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [string]
num allocs: 268, mem used: 45081
node "typename": [string] (0/0)
Lexxed token [boop]
num allocs: 270, mem used: 45220
Lexxed token [;]
num allocs: 271, mem used: 45225
node "var_decl": [boop] (0/1)
node "decl_stmt": [(null)] (2/1)
node "stmt": [(null)] (1/1)
node "stmt_list_ne": [(null)] (0/2)
Lexxed token [end]
num allocs: 279, mem used: 45777
node "stmt_list": [(null)] (0/1)
unroll [stmt_list]  unroll done
FUNC_DEF ID = [main]
node "func_def": [main] (0/3)
node "decl_stmt": [(null)] (1/1)
node "decl_stmt_list_ne": [(null)] (0/2)
Lexxed token [class]
num allocs: 287, mem used: 46345
Lexxed token [horse]
num allocs: 287, mem used: 46345
Lexxed token [float]
num allocs: 288, mem used: 46351
node "typename": [float] (0/0)
Lexxed token [fluff]
num allocs: 290, mem used: 46489
Lexxed token [=]
num allocs: 291, mem used: 46495
Lexxed token [5]
num allocs: 291, mem used: 46495
node "expr_const": [5] (0/0)
Lexxed token [;]
num allocs: 293, mem used: 46629
node "var_decl_assign": [fluff] (1/2)
node "decl_stmt": [(null)] (2/1)
node "decl_stmt_list_ne": [(null)] (1/1)
Lexxed token [int]
num allocs: 299, mem used: 47325
node "typename": [int] (0/0)
Lexxed token [boop]
num allocs: 301, mem used: 47461
Lexxed token [(]
num allocs: 302, mem used: 47466
Lexxed token [)]
num allocs: 302, mem used: 47466
node "var_decl_list": [<empty>] (1/0)
Lexxed token [fluff]
num allocs: 303, mem used: 47598
node "expr_id": [fluff] (0/0)
Lexxed token [=]
num allocs: 305, mem used: 47736
Lexxed token [fluff]
num allocs: 305, mem used: 47736
node "expr_id": [fluff] (0/0)
Lexxed token [+]
num allocs: 307, mem used: 47874
Lexxed token [1]
num allocs: 307, mem used: 47874
node "expr_const": [1] (0/0)
Lexxed token [;]
num allocs: 309, mem used: 48008
node "expr_+": [(null)] (0/2)
node "expr_=": [(null)] (0/2)
node "imp_stmt": [(null)] (2/1)
node "stmt": [(null)] (0/1)
node "stmt_list_ne": [(null)] (1/1)
Lexxed token [end]
num allocs: 319, mem used: 48704
node "stmt_list": [(null)] (0/1)
unroll [stmt_list]  unroll done
FUNC_DEF ID = [boop]
node "func_def": [boop] (0/3)
node "decl_stmt": [(null)] (1/1)
node "decl_stmt_list_ne": [(null)] (0/2)
Lexxed token [end]
num allocs: 327, mem used: 49264
node "decl_stmt_list": [(null)] (0/1)
unroll [decl_stmt_list]  unroll done
FUNC_DEF ID = [horse]
node "class_def": [horse] (0/1)
node "decl_stmt": [(null)] (0/1)
node "decl_stmt_list_ne": [(null)] (0/2)
node "decl_stmt_list": [(null)] (0/1)
unroll [decl_stmt_list]  unroll done
node "program": [(null)] (0/1)

PARSING DONE
printing ast 00540D40, 761729A0, 0, [program]
printing ast 00540BF0, 761729A0, 0, [decl_stmt_list]
printing ast 00689368, 761729A0, 0, [decl_stmt]
printing ast 00689288, 761729A0, 0, [func_def]
printing ast 00681180, 761729A0, 0, [typename]
printing ast 00689148, 761729A0, 1, [var_decl_list]
printing ast 00681320, 761729A0, 0, [var_decl]
printing ast 00681260, 761729A0, 0, [typename]
printing ast 006891E8, 761729A0, 2, [stmt_list]
printing ast 00689A48, 761729A0, 1, [decl_stmt]
printing ast 00689980, 761729A0, 0, [func_def]
printing ast 006894E8, 761729A0, 0, [typename]
printing ast 00689820, 761729A0, 1, [var_decl_list]
printing ast 006896C0, 761729A0, 0, [var_decl]
printing ast 006895C8, 761729A0, 0, [typename]
printing ast 006898E0, 761729A0, 2, [stmt_list]
printing ast 0068A170, 761729A0, 2, [decl_stmt]
printing ast 0068A0A8, 761729A0, 0, [func_def]
printing ast 00689C28, 761729A0, 0, [typename]
printing ast 00689F48, 761729A0, 1, [var_decl_list]
printing ast 00689DC8, 761729A0, 0, [var_decl]
printing ast 00689D08, 761729A0, 0, [typename]
printing ast 0068A008, 761729A0, 2, [stmt_list]
printing ast 0068F718, 761729A0, 3, [decl_stmt]
printing ast 0068F650, 761729A0, 0, [func_def]
printing ast 0068A388, 761729A0, 0, [typename]
printing ast 0068A8F0, 761729A0, 1, [var_decl_list]
printing ast 0068A508, 761729A0, 0, [var_decl]
printing ast 0068A448, 761729A0, 0, [typename]
printing ast 0068A768, 761729A0, 1, [var_decl]
printing ast 0068A6A8, 761729A0, 0, [typename]
printing ast 0068F588, 761729A0, 2, [stmt_list]
printing ast 0068AC18, 761729A0, 0, [stmt]
printing ast 0068AB58, 761729A0, 0, [decl_stmt]
printing ast 0068AA98, 761729A0, 0, [var_decl]
printing ast 0068A9D8, 761729A0, 0, [typename]
printing ast 0068F038, 761729A0, 1, [stmt]
printing ast 0068EF98, 761729A0, 0, [imp_stmt]
printing ast 0068EEF8, 761729A0, 0, [if_block]
printing ast 0068BA30, 761729A0, 0, [if_then]
printing ast 0068AFE0, 761729A0, 0, [expr_=]
printing ast 0068AEA0, 761729A0, 0, [expr_id]
printing ast 0068AF40, 761729A0, 1, [expr_const]
printing ast 0068B968, 761729A0, 1, [stmt_list]
printing ast 0068B4E0, 761729A0, 0, [stmt]
printing ast 0068B420, 761729A0, 0, [imp_stmt]
printing ast 0068B358, 761729A0, 0, [expr_call]
printing ast 0068B080, 761729A0, 0, [expr_id]
printing ast 0068B298, 761729A0, 1, [expr_list]
printing ast 0068B158, 761729A0, 0, [expr_const]
printing ast 0068B7E0, 761729A0, 1, [stmt]
printing ast 0068B720, 761729A0, 0, [imp_stmt]
printing ast 0068B680, 761729A0, 0, [expr_const]
printing ast 0068EDA8, 761729A0, 1, [stmt_list]
printing ast 0068C1A8, 761729A0, 0, [stmt]
printing ast 0068C108, 761729A0, 0, [decl_stmt]
printing ast 0068C040, 761729A0, 0, [var_decl_assign]
printing ast 0068BB18, 761729A0, 0, [typename]
printing ast 0068BFA0, 761729A0, 1, [expr_call]
printing ast 0068BBF8, 761729A0, 0, [expr_id]
printing ast 0068AD98, 761729A0, 1, [expr_list]
printing ast 0068BCB8, 761729A0, 0, [expr_id]
printing ast 0068C7B8, 761729A0, 1, [stmt]
printing ast 0068C6F8, 761729A0, 0, [imp_stmt]
printing ast 0068C630, 761729A0, 0, [expr_=]
printing ast 0068C348, 761729A0, 0, [expr_id]
printing ast 0068C568, 761729A0, 1, [expr_*]
printing ast 0068C408, 761729A0, 0, [expr_id]
printing ast 0068C4C8, 761729A0, 1, [expr_id]
printing ast 0068CDC8, 761729A0, 2, [stmt]
printing ast 0068CD08, 761729A0, 0, [imp_stmt]
printing ast 0068CC40, 761729A0, 0, [expr_call]
printing ast 0068C960, 761729A0, 0, [expr_id]
printing ast 0068CB80, 761729A0, 1, [expr_list]
printing ast 0068CA20, 761729A0, 0, [expr_id]
printing ast 0068E918, 761729A0, 3, [stmt]
printing ast 0068E858, 761729A0, 0, [imp_stmt]
printing ast 0068E790, 761729A0, 0, [while_loop]
printing ast 0068CF70, 761729A0, 0, [expr_id]
printing ast 0068E6C8, 761729A0, 1, [stmt_list]
printing ast 0068D498, 761729A0, 0, [stmt]
printing ast 0068D3D8, 761729A0, 0, [imp_stmt]
printing ast 0068D310, 761729A0, 0, [expr_call]
printing ast 0068D030, 761729A0, 0, [expr_id]
printing ast 0068D250, 761729A0, 1, [expr_list]
printing ast 0068D0F0, 761729A0, 0, [expr_id]
printing ast 0068DB68, 761729A0, 1, [stmt]
printing ast 0068DAA8, 761729A0, 0, [imp_stmt]
printing ast 0068D9E0, 761729A0, 0, [expr_=]
printing ast 0068BE38, 761729A0, 0, [expr_id]
printing ast 0068D918, 761729A0, 1, [expr_/]
printing ast 0068BEF8, 761729A0, 0, [expr_id]
printing ast 0068D878, 761729A0, 1, [expr_const]
printing ast 0068E540, 761729A0, 2, [stmt]
printing ast 0068E480, 761729A0, 0, [imp_stmt]
printing ast 0068E3C0, 761729A0, 0, [if_block]
printing ast 0068E2F8, 761729A0, 0, [if_then]
printing ast 0068DE70, 761729A0, 0, [expr_=]
printing ast 0068DD10, 761729A0, 0, [expr_id]
printing ast 0068DDD0, 761729A0, 1, [expr_const]
printing ast 0068E238, 761729A0, 1, [stmt_list]
printing ast 0068E0B8, 761729A0, 0, [stmt]
printing ast 0068DFF8, 761729A0, 0, [imp_stmt]
printing ast 0068DF58, 761729A0, 0, [expr_const]
printing ast 0068EC20, 761729A0, 4, [stmt]
printing ast 0068EB60, 761729A0, 0, [imp_stmt]
printing ast 0068EAC0, 761729A0, 0, [expr_const]
printing ast 0068F400, 761729A0, 2, [stmt]
printing ast 0068F340, 761729A0, 0, [decl_stmt]
printing ast 0068F280, 761729A0, 0, [var_decl]
printing ast 0068F1C0, 761729A0, 0, [typename]
printing ast 00540A68, 761729A0, 4, [decl_stmt]
printing ast 005409A8, 761729A0, 0, [class_def]
printing ast 005408E0, 761729A0, 0, [decl_stmt_list]
printing ast 0068FE80, 761729A0, 0, [decl_stmt]
printing ast 0068FA60, 761729A0, 0, [var_decl_assign]
printing ast 0068F8E0, 761729A0, 0, [typename]
printing ast 0068F9C0, 761729A0, 1, [expr_const]
printing ast 00540758, 761729A0, 1, [decl_stmt]
printing ast 00540690, 761729A0, 0, [func_def]
printing ast 0068D658, 761729A0, 0, [typename]
printing ast 0068D718, 761729A0, 1, [var_decl_list]
printing ast 005405D0, 761729A0, 2, [stmt_list]
printing ast 00540450, 761729A0, 0, [stmt]
printing ast 00540390, 761729A0, 0, [imp_stmt]
printing ast 005402C8, 761729A0, 0, [expr_=]
printing ast 00540048, 761729A0, 0, [expr_id]
printing ast 00540228, 761729A0, 1, [expr_+]
printing ast 005400E8, 761729A0, 0, [expr_id]
printing ast 00540188, 761729A0, 1, [expr_const]

PRINTING DONE
semantic got program, @ 1-29, imperative pass
IR_next_name: returning [ST1]
 semantic got decl_stmt_list, @ 1-29, declarative pass
  semantic got decl_stmt, @ 1-1, declarative pass
   semantic got func_def, "import", @ 1-1, declarative pass
IR_next_name: returning [ST2]
    semantic got var_decl_list, @ 1-1, declarative pass
     semantic got var_decl, "arg", @ 1-1, declarative pass
  semantic got decl_stmt, @ 2-2, declarative pass
   semantic got func_def, "export", @ 2-2, declarative pass
IR_next_name: returning [ST3]
    semantic got var_decl_list, @ 2-2, declarative pass
     semantic got var_decl, "arg", @ 2-2, declarative pass
  semantic got decl_stmt, @ 3-3, declarative pass
   semantic got func_def, "print", @ 3-3, declarative pass
IR_next_name: returning [ST4]
    semantic got var_decl_list, @ 3-3, declarative pass
     semantic got var_decl, "str", @ 3-3, declarative pass
  semantic got decl_stmt, @ 5-22, declarative pass
   semantic got func_def, "main", @ 5-22, declarative pass
IR_next_name: returning [ST5]
    semantic got var_decl_list, @ 5-5, declarative pass
     semantic got var_decl, "argc", @ 5-5, declarative pass
     semantic got var_decl, "argv", @ 5-5, declarative pass
  semantic got decl_stmt, @ 24-29, declarative pass
   semantic got class_def, "horse", @ 24-29, declarative pass
IR_next_name: returning [ST6]
    semantic got decl_stmt_list, @ 25-28, declarative pass
     semantic got decl_stmt, @ 25-25, declarative pass
      semantic got var_decl_assign, "fluff", @ 25-25, declarative pass
     semantic got decl_stmt, @ 26-28, declarative pass
      semantic got func_def, "boop", @ 26-28, declarative pass
IR_next_name: returning [ST7]
       semantic got var_decl_list, "<empty>", @ 0-0, declarative pass
 semantic got decl_stmt_list, @ 1-29, imperative pass
  semantic got decl_stmt, @ 1-1, imperative pass
   semantic got func_def, "import", @ 1-1, imperative pass
found symbol 'import'->'ST1'
IR_next_name: returning [CS1]
    semantic got stmt_list, "<empty>", @ 0-0, imperative pass
  semantic got decl_stmt, @ 2-2, imperative pass
   semantic got func_def, "export", @ 2-2, imperative pass
found symbol 'export'->'ST1'
IR_next_name: returning [CS2]
    semantic got stmt_list, "<empty>", @ 0-0, imperative pass
  semantic got decl_stmt, @ 3-3, imperative pass
   semantic got func_def, "print", @ 3-3, imperative pass
found symbol 'print'->'ST1'
IR_next_name: returning [CS3]
    semantic got stmt_list, "<empty>", @ 0-0, imperative pass
  semantic got decl_stmt, @ 5-22, imperative pass
   semantic got func_def, "main", @ 5-22, imperative pass
found symbol 'main'->'ST1'
IR_next_name: returning [CS4]
    semantic got stmt_list, @ 6-21, imperative pass
     semantic got stmt, @ 6-6, imperative pass
      semantic got decl_stmt, @ 6-6, imperative pass
       semantic got var_decl, "C", @ 6-6, imperative pass
     semantic got stmt, @ 7-20, imperative pass
      semantic got imp_stmt, @ 7-20, imperative pass
       semantic got if_block, @ 7-20, imperative pass
        semantic got if_then, @ 7-9, imperative pass
         semantic got expr_=, @ 7-7, imperative pass
          semantic got expr_id, "argc", @ 7-7, imperative pass
          semantic got expr_const, "0", @ 7-7, imperative pass
IR_next_name: returning [reg1]
IR_next_name: returning [lbl1]
IR_next_name: returning [ST8]
IR_next_name: returning [CS5]
         semantic got stmt_list, @ 8-9, declarative pass
          semantic got stmt, @ 8-8, declarative pass
           semantic got imp_stmt, @ 8-8, declarative pass
          semantic got stmt, @ 9-9, declarative pass
           semantic got imp_stmt, @ 9-9, declarative pass
         semantic got stmt_list, @ 8-9, imperative pass
          semantic got stmt, @ 8-8, imperative pass
           semantic got imp_stmt, @ 8-8, imperative pass
            semantic got expr_call, @ 8-8, imperative pass
             semantic got expr_id, "print", @ 8-8, imperative pass
          semantic got stmt, @ 9-9, imperative pass
           semantic got imp_stmt, @ 9-9, imperative pass
            semantic got expr_const, "1", @ 9-9, imperative pass
IR_next_name: returning [reg2]
        semantic got stmt_list, @ 11-19, imperative pass
         semantic got stmt, @ 11-11, imperative pass
          semantic got decl_stmt, @ 11-11, imperative pass
           semantic got var_decl_assign, "A", @ 11-11, imperative pass
         semantic got stmt, @ 12-12, imperative pass
          semantic got imp_stmt, @ 12-12, imperative pass
           semantic got expr_=, @ 12-12, imperative pass
            semantic got expr_id, "A", @ 12-12, imperative pass
            semantic got expr_*, @ 12-12, imperative pass
             semantic got expr_id, "A", @ 12-12, imperative pass
             semantic got expr_id, "argv", @ 12-12, imperative pass
IR_next_name: returning [reg3]
         semantic got stmt, @ 13-13, imperative pass
          semantic got imp_stmt, @ 13-13, imperative pass
           semantic got expr_call, @ 13-13, imperative pass
            semantic got expr_id, "export", @ 13-13, imperative pass
         semantic got stmt, @ 14-18, imperative pass
          semantic got imp_stmt, @ 14-18, imperative pass
           semantic got while_loop, @ 14-18, imperative pass
            semantic got expr_id, "A", @ 14-14, imperative pass
IR_next_name: returning [lbl2]
IR_next_name: returning [lbl3]
IR_next_name: returning [ST9]
IR_next_name: returning [CS6]
            semantic got stmt_list, @ 15-17, imperative pass
             semantic got stmt, @ 15-15, imperative pass
              semantic got imp_stmt, @ 15-15, imperative pass
               semantic got expr_call, @ 15-15, imperative pass
                semantic got expr_id, "print", @ 15-15, imperative pass
             semantic got stmt, @ 16-16, imperative pass
              semantic got imp_stmt, @ 16-16, imperative pass
               semantic got expr_=, @ 16-16, imperative pass
                semantic got expr_id, "A", @ 16-16, imperative pass
                semantic got expr_/, @ 16-16, imperative pass
                 semantic got expr_id, "A", @ 16-16, imperative pass
                 semantic got expr_const, "1", @ 16-16, imperative pass
IR_next_name: returning [reg4]
IR_next_name: returning [reg5]
             semantic got stmt, @ 17-17, imperative pass
              semantic got imp_stmt, @ 17-17, imperative pass
               semantic got if_block, @ 17-17, imperative pass
                semantic got if_then, @ 17-17, imperative pass
                 semantic got expr_=, @ 17-17, imperative pass
                  semantic got expr_id, "A", @ 17-17, imperative pass
                  semantic got expr_const, "1", @ 17-17, imperative pass
IR_next_name: returning [reg6]
IR_next_name: returning [lbl4]
IR_next_name: returning [ST10]
IR_next_name: returning [CS7]
                 semantic got stmt_list, @ 17-17, declarative pass
                  semantic got stmt, @ 17-17, declarative pass
                   semantic got imp_stmt, @ 17-17, declarative pass
                 semantic got stmt_list, @ 17-17, imperative pass
                  semantic got stmt, @ 17-17, imperative pass
                   semantic got imp_stmt, @ 17-17, imperative pass
                    semantic got expr_const, "1", @ 17-17, imperative pass
IR_next_name: returning [reg7]
         semantic got stmt, @ 19-19, imperative pass
          semantic got imp_stmt, @ 19-19, imperative pass
           semantic got expr_const, "0", @ 19-19, imperative pass
IR_next_name: returning [reg8]
     semantic got stmt, @ 21-21, imperative pass
      semantic got decl_stmt, @ 21-21, imperative pass
       semantic got var_decl, "boop", @ 21-21, imperative pass
  semantic got decl_stmt, @ 24-29, imperative pass
   semantic got class_def, "horse", @ 24-29, imperative pass
found symbol 'horse'->'ST1'
    semantic got decl_stmt_list, @ 25-28, imperative pass
     semantic got decl_stmt, @ 25-25, imperative pass
      semantic got var_decl_assign, "fluff", @ 25-25, imperative pass
     semantic got decl_stmt, @ 26-28, imperative pass
      semantic got func_def, "boop", @ 26-28, imperative pass
found symbol 'boop'->'ST6'
IR_next_name: returning [CS8]
       semantic got stmt_list, @ 27-27, imperative pass
        semantic got stmt, @ 27-27, imperative pass
         semantic got imp_stmt, @ 27-27, imperative pass
          semantic got expr_=, @ 27-27, imperative pass
           semantic got expr_id, "fluff", @ 27-27, imperative pass
           semantic got expr_+, @ 27-27, imperative pass
            semantic got expr_id, "fluff", @ 27-27, imperative pass
            semantic got expr_const, "1", @ 27-27, imperative pass
IR_next_name: returning [reg9]
IR_next_name: returning [reg10]
semantic: done

PRINTING SEMANTIC
printing symbol tables (10):
Symbol table 'ST1':
symbol [import]: function
 type = int
 scope = ST2
 code = CS1
symbol [export]: function
 type = int
 scope = ST3
 code = CS2
symbol [print]: function
 type = int
 scope = ST4
 code = CS3
symbol [main]: function
 type = int
 scope = ST5
 code = CS4
symbol [horse]: class
 scope = ST6
End Symbol table
Symbol table 'ST2'->'ST1':
symbol [arg]: parameter
 type = int
 pos = 0
End Symbol table
Symbol table 'ST3'->'ST1':
symbol [arg]: parameter
 type = int
 pos = 0
End Symbol table
Symbol table 'ST4'->'ST1':
symbol [str]: parameter
 type = string
 pos = 0
End Symbol table
Symbol table 'ST5'->'ST1':
symbol [argc]: parameter
 type = int
 pos = 0
symbol [argv]: parameter
 type = int
 pos = 1
End Symbol table
Symbol table 'ST6'->'ST1':
symbol [fluff]: variable
 type = float
symbol [boop]: function
 type = int
 scope = ST7
 code = CS8
End Symbol table
Symbol table 'ST7'->'ST6':
End Symbol table
Symbol table 'ST8'->'ST5':
End Symbol table
Symbol table 'ST9'->'ST5':
End Symbol table
Symbol table 'ST10'->'ST9':
End Symbol table
printing code segments (8):
code segment 'CS1'->'ST2'
 //function import
end code segment
code segment 'CS2'->'ST3'
 //function export
end code segment
code segment 'CS3'->'ST4'
 //function print
end code segment
code segment 'CS4'->'ST5'
 //function main
 //if (expr) then stmt_list
 MOV reg1 0
 MOV argc reg1
 IFNOT argc lbl1
 INSERT CS5
 LABEL lbl1
 MULTIPLY reg3 A argv
 MOV A reg3
 LABEL lbl2
 IFNOT A lbl3
 INSERT CS6
 GOTO lbl2
 LABEL lbl3
 MOV reg8 0
 RETURN reg8
end code segment
code segment 'CS5'->'ST8'
 MOV reg2 1
 RETURN reg2
end code segment
code segment 'CS6'->'ST9'
 MOV reg4 1
 DIVIDE reg5 A reg4
 MOV A reg5
 //if (expr) then stmt_list
 MOV reg6 1
 MOV A reg6
 IFNOT A lbl4
 INSERT CS7
 LABEL lbl4
end code segment
code segment 'CS7'->'ST10'
 MOV reg7 1
 RETURN reg7
end code segment
code segment 'CS8'->'ST7'
 //function boop
 MOV reg9 1
 ADD reg10 fluff reg9
 MOV fluff reg10
end code segment

GOOD BYE
[Inferior 1 (process 2408) exited normally]
(gdb) (gdb) quit
